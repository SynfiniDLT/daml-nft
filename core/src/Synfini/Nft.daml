-- Copyright (c) 2022 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Nft where

import DA.Assert ((===))
import DA.Set (Set)
import qualified DA.Set as Set

data TokenId = TokenId
  with
    signatories : Set Party
    value : Text
  deriving (Show, Eq)

data WalletId = WalletId
  with
    signatories : Set Party
    value : Text
  deriving (Show, Eq)

data Wallet = Wallet
  with
    id : WalletId
    provider : Party
    owner : Party
  deriving (Show, Eq)

template Nft
  with
    id : TokenId
    issuer : Party
    wallet : Wallet
    observers : Set Party
    url : Optional Text
    -- Are these needed to be stored on ledger?
    name : Text
    description : Text
  where
    signatory id.signatories
    observer observers

    key id : TokenId
    maintainer key.signatories

-- template NftCreatorRole
--   with
--     creator : Party
--     operator : Party
--     observers : Set Party
--   where
--     signatory operator
--     observer creator, observers

--     key (operator, creator) : (Party, Party)
--     maintainer key._1

-- template NftMintRequest
--   with
--     nft : Nft
--   where
--     signatory Set.delete nft.operator nft.id.signatories
--     observer nft.operator

--     choice NftMintRequest_Mint : ContractId Nft
--       controller nft.operator
--       do
--         fetchByKey @NftCreatorRole (nft.operator, nft.creator)
--         create nft

template WalletControlledTransferRule
  with
    tokenId : TokenId
    owner : Party
    observers : Set Party
  where
    signatory tokenId.signatories
    observer observers

    key tokenId : TokenId
    maintainer key.signatories

    choice NftTransferRule_Transfer : (ContractId Nft, ContractId WalletControlledTransferRule)
      with
        wallet : Wallet
      controller owner
      do
        (nftCid, nft) <- fetchByKey @Nft tokenId
        nft.wallet.owner === owner
        archive nftCid
        let newSignatories = Set.difference
              (Set.union wallet.id.signatories nft.id.signatories)
              (Set.difference nft.wallet.id.signatories wallet.id.signatories)
        let newNft = nft with
              id.signatories = newSignatories
              wallet
        exerciseByKey @WalletAcquisitionRule wallet.id NftAcquisitionRule_Acquire with ctrl = owner, nft = newNft

template WalletAcquisitionRule
  with
    wallet : Wallet
    ctrls : Set Party
    observers : Set Party
  where
    signatory wallet.provider
    observer ctrls, observers

    key wallet.id : WalletId
    maintainer key.signatories

    nonconsuming choice NftAcquisitionRule_Acquire : (ContractId Nft, ContractId WalletControlledTransferRule)
      with
        ctrl : Party
        nft : Nft
      controller ctrl, nft.id.signatories
      do
        assertMsg "Controller must be authorized to send nft" $ ctrl `Set.member` ctrls
        nft.wallet === wallet
        nftCid <- create nft
        transferRuleCid <- create WalletControlledTransferRule with
          tokenId = nft.id
          owner = wallet.owner
          observers
        pure (nftCid, transferRuleCid)
