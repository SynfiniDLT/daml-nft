-- Copyright (c) 2022 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Nft where

import DA.Assert ((===))
import DA.Set (Set)
import qualified DA.Set as Set

data TokenId = TokenId
  with
    signatories : Set Party
    value : Text
  deriving (Show, Eq, Ord)

data WalletId = WalletId
  with
    signatories : Set Party
    value : Text
  deriving (Show, Eq, Ord)

data Wallet = Wallet
  with
    id : WalletId
    provider : Party
    owner : Party
  deriving (Show, Eq, Ord)

template Nft
  with
    id : TokenId
    issuer : Party
    wallet : Wallet
    observers : Set Party
    url : Optional Text
    -- Are these needed to be stored on ledger?
    name : Text
    description : Text
  where
    signatory id.signatories, wallet.id.signatories
    observer observers

    key id : TokenId
    maintainer key.signatories

template FreeTransferRule
  with
    tokenId : TokenId
    wallet : Wallet
    observers : Set Party
  where
    signatory tokenId.signatories, wallet.id.signatories
    observer wallet.owner, observers

    key tokenId : TokenId
    maintainer key.signatories

    choice FreeTransferRule_Transfer : (ContractId Nft, ContractId FreeTransferRule)
      with
        recipientWallet : Wallet
      controller wallet.owner
      do
        (nftCid, nft) <- fetchByKey @Nft tokenId
        nft.wallet === wallet
        archive nftCid
        newNftCid <- create nft with wallet = recipientWallet
        newTransferRuleCid <- create this with wallet = recipientWallet
        pure (newNftCid, newTransferRuleCid)

template WalletControlledTransferRule
  with
    tokenId : TokenId
    wallet : Wallet
    observers : Set Party
  where
    signatory tokenId.signatories, wallet.id.signatories
    observer observers

    key tokenId : TokenId
    maintainer key.signatories

    choice WalletControlledTransferRule_Transfer : (ContractId Nft, ContractId WalletControlledTransferRule)
      with
        recipientWallet : Wallet
      controller wallet.owner
      do
        (nftCid, nft) <- fetchByKey @Nft tokenId
        nft.wallet === wallet
        archive nftCid
        let newNft = nft with wallet = recipientWallet
        newNftCid <- exerciseByKey @WalletAcquisitionRule wallet.id WalletAcquisitionRule_Acquire with ctrl = wallet.owner, nft = newNft
        newTransferRuleCid <- create this with wallet = recipientWallet
        pure (newNftCid, newTransferRuleCid)

template WalletAcquisitionRule
  with
    wallet : Wallet
    ctrls : Set Party
    observers : Set Party
  where
    signatory wallet.id.signatories
    observer wallet.owner, ctrls, observers

    key wallet.id : WalletId
    maintainer key.signatories

    nonconsuming choice WalletAcquisitionRule_Acquire : ContractId Nft
      with
        ctrl : Party
        nft : Nft
      controller ctrl, nft.id.signatories
      do
        assertMsg "Controller must be authorized to send nft" $ ctrl `Set.member` ctrls
        nft.wallet === wallet
        create nft
