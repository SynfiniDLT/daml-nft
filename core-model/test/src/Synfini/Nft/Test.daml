-- Copyright (c) 2022 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Nft.Test where

import Daml.Script
import DA.Assert
import qualified DA.Set as Set
import Synfini.Nft
import Synfini.Nft.TestUtils

test_Nft_properties : Script ()
test_Nft_properties = withParties $ \parties -> do
  let collectionId = CollectionId with
        value = ""
        signatories = Set.singleton parties.alice
  let tokenId = TokenId with
        value = ""
        signatories = Set.singleton parties.bob
  let walletId = WalletId with
        value = ""
        signatories = Set.singleton parties.charlie
  let wallet = Wallet with
        id = walletId
        owner = parties.david
        provider = parties.eve
  let nft = Nft with
        collectionId
        tokenId
        issuer = parties.frank
        wallet
        observers = Set.singleton parties.grace
  Set.fromList (signatory nft) === Set.fromList [parties.alice, parties.bob, parties.charlie]
  Set.fromList (observer nft) === Set.fromList [parties.david, parties.eve, parties.frank, parties.grace]
  key nft === (collectionId, tokenId)

test_NftTransferRule_properties : Script ()
test_NftTransferRule_properties = withParties $ \parties -> do
  let collectionId = CollectionId with
        value = ""
        signatories = Set.singleton parties.alice
  let tokenId = TokenId with
        value = ""
        signatories = Set.singleton parties.bob
  let walletId = WalletId with
        value = ""
        signatories = Set.singleton parties.charlie
  let wallet = Wallet with
        id = walletId
        owner = parties.david
        provider = parties.eve
  let transferRule = NftTransferRule with
        collectionId
        tokenId
        issuer = parties.frank
        wallet
        observers = Set.singleton parties.grace
  Set.fromList (signatory transferRule) === Set.fromList [parties.alice, parties.bob, parties.charlie]
  Set.fromList (observer transferRule) === Set.fromList [parties.david, parties.eve, parties.frank, parties.grace]
  key transferRule === (collectionId, tokenId)

test_NftAcquisitionRule_properties : Script ()
test_NftAcquisitionRule_properties = withParties $ \parties -> do
  let walletId = WalletId with
        value = ""
        signatories = Set.singleton parties.alice
  let wallet = Wallet with
        id = walletId
        owner = parties.bob
        provider = parties.charlie
  let acquisitionRule = NftAcquisitionRule with
        wallet
        senderWhiteList = Some $ Set.singleton parties.david
        observers = Set.singleton parties.eve
  Set.fromList (signatory acquisitionRule) === Set.singleton parties.alice
  Set.fromList (observer acquisitionRule) === Set.fromList [parties.bob, parties.charlie, parties.david, parties.eve]
  key acquisitionRule === walletId

test_NftAcquisitionRule_Acquire : Script ()
test_NftAcquisitionRule_Acquire = withParties $ \parties -> do
  let collectionId = CollectionId with
        value = ""
        signatories = Set.singleton parties.alice
  let tokenId = TokenId with
        value = ""
        signatories = Set.singleton parties.bob
  let walletId = WalletId with
        value = ""
        signatories = Set.singleton parties.charlie
  let wallet = Wallet with
        id = walletId
        owner = parties.david
        provider = parties.eve
  let acquisitionRule = NftAcquisitionRule with
        wallet
        senderWhiteList = Some $ Set.singleton parties.frank
        observers = Set.fromList (allParties parties)
  let acquisitionRuleNoWhiteList = acquisitionRule with
        wallet.id.value = "open wallet"
        senderWhiteList = None
  let nft = Nft with
        collectionId
        tokenId
        wallet
        issuer = parties.david
        observers = Set.empty
  let nftWrongWallet = nft with wallet.id.value = "other wallet"

  acquisitionRuleCid <- submit parties.charlie do createCmd acquisitionRule
  acquisitionRuleNoWhiteListCid <- submit parties.charlie do createCmd acquisitionRuleNoWhiteList

  -- Not whitelisted
  submitMultiMustFail [parties.alice, parties.bob, parties.grace] [] do
    exerciseCmd acquisitionRuleCid NftAcquisitionRule_Acquire with
      nft
      ctrl = parties.grace

  -- Wrong wallet
  submitMultiMustFail [parties.alice, parties.bob, parties.frank] [] do
    exerciseCmd acquisitionRuleCid NftAcquisitionRule_Acquire with
      nft = nftWrongWallet
      ctrl = parties.frank

  nftCid <- submitMulti [parties.alice, parties.bob, parties.frank] [] do
    exerciseCmd acquisitionRuleCid NftAcquisitionRule_Acquire with
      nft
      ctrl = parties.frank
  activeNfts <- query @Nft parties.david
  activeNfts === [(nftCid, nft)]

  -- Works for a wallet without a whitelist
  submitMulti [parties.alice, parties.bob, parties.grace] [] do
    exerciseCmd acquisitionRuleNoWhiteListCid NftAcquisitionRule_Acquire with
      nft = nft with
        tokenId.value = "other nft"
        wallet = acquisitionRuleNoWhiteList.wallet
      ctrl = parties.grace
  pure ()
