-- Copyright (c) 2022 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Nft where

import DA.Assert ((===))
import qualified DA.Optional as O
import DA.Set (Set)
import qualified DA.Set as Set

data CollectionId = CollectionId
  with
    signatories : Set Party
    value : Text
  deriving (Show, Eq, Ord)

data TokenId = TokenId
  with
    signatories : Set Party
    value : Text
  deriving (Show, Eq, Ord)

data WalletId = WalletId
  with
    signatories : Set Party
    value : Text
  deriving (Show, Eq, Ord)

data Wallet = Wallet
  with
    id : WalletId
    provider : Party
    owner : Party
  deriving (Show, Eq)

template Nft
  with
    collectionId : CollectionId
    tokenId : TokenId
    issuer : Party
    wallet : Wallet
    observers : Set Party
  where
    signatory collectionId.signatories, tokenId.signatories, wallet.id.signatories
    observer observers

    key (collectionId, tokenId) : (CollectionId, TokenId)
    maintainer key._1.signatories

-- | Rule to allow the owner of a particular NFT to transfer it, but only if the recipient is willing to accept it
-- via a 'NftAcquisitionRule'.
template NftTransferRule
  with
    collectionId : CollectionId
    tokenId : TokenId
    wallet : Wallet
    observers : Set Party
  where
    signatory collectionId.signatories, tokenId.signatories, wallet.id.signatories
    observer observers

    key (collectionId, tokenId) : (CollectionId, TokenId)
    maintainer key._1.signatories

    choice NftTransferRule_Transfer : (ContractId Nft, ContractId NftTransferRule)
      with
        recipientWallet : Wallet
      controller wallet.owner
      do
        (nftCid, nft) <- fetchByKey @Nft (collectionId, tokenId)
        nft.wallet === wallet
        archive nftCid
        let newNft = nft with wallet = recipientWallet
        newNftCid <- exerciseByKey @NftAcquisitionRule wallet.id NftAcquisitionRule_Acquire with ctrl = wallet.owner, nft = newNft
        newNftTransferRuleCid <- create this with wallet = recipientWallet
        pure (newNftCid, newNftTransferRuleCid)

-- | Rule to allow a wallet to receive NFTs from other parties. This may be a long-lived contract or may be created and
-- archived within a single transaction, such as in a "propose-accept" workflow.
template NftAcquisitionRule
  with
    wallet : Wallet
    senderWhiteList : Optional (Set Party) -- ^ If provided, contains all parites permitted to send NFTs to this wallet.
    -- No restrictions on transfers apply if white list is not provided.
    observers : Set Party
  where
    signatory wallet.id.signatories
    observer wallet.owner, O.fromOptional Set.empty senderWhiteList, observers

    key wallet.id : WalletId
    maintainer key.signatories

    nonconsuming choice NftAcquisitionRule_Acquire : ContractId Nft
      with
        ctrl : Party
        nft : Nft
      controller ctrl, nft.tokenId.signatories
      do
        assertMsg
          "Controller must be authorized to send nft"
          (O.optional True (Set.member ctrl) senderWhiteList)
        nft.wallet === wallet
        create nft
