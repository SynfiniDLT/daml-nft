-- Copyright (c) 2022 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Nft.Trade.SettlementInstruction where

import DA.Finance.Types
import DA.Set (Set)
import Synfini.Nft

data TransferMethod = FreeTransfer | WalletControlled deriving (Show, Eq)

data NftSettlementInstruction_Process_Result =
  FreeTransferProcessResult with
    nftCid : ContractId Nft
    freeTransferRuleCid : ContractId FreeTransferRule |
  WalletControlledProcessResult with
    nftCid : ContractId Nft
    walletControlledTransferRuleCid : ContractId WalletControlledTransferRule
  deriving (Show, Eq)

template NftSettlementInstruction
  with
    masterAgreement : MasterAgreement
      -- ^ The master agreement to which the settlement applies.
    tradeId : Id
    collectionId : CollectionId
    tokenId : TokenId
    senderWallet : Wallet
    recipientWallet : Wallet
    method : TransferMethod
    observers : Set Party
  where
    signatory masterAgreement.id.signatories, senderWallet.owner
    observer masterAgreement.party1, masterAgreement.party2, observers

    key (masterAgreement.id, tradeId, collectionId, tokenId) : (Id, Id, CollectionId, TokenId)
    maintainer key._1.signatories

    choice NftSettlementInstruction_Process : NftSettlementInstruction_Process_Result
      controller masterAgreement.id.signatories
      do
        case method of
          FreeTransfer -> do
            (nftCid, freeTransferRuleCid) <- exerciseByKey @FreeTransferRule (collectionId, tokenId) FreeTransferRule_Transfer with recipientWallet
            pure FreeTransferProcessResult with nftCid, freeTransferRuleCid
          WalletControlled -> do
            (nftCid, walletControlledTransferRuleCid) <- exerciseByKey
              @WalletControlledTransferRule
              (collectionId, tokenId)
              WalletControlledTransferRule_Transfer with recipientWallet
            pure WalletControlledProcessResult with nftCid, walletControlledTransferRuleCid
