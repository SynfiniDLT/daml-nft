-- Copyright (c) 2022 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Nft.Trade.Dvp.Settlement where

import DA.Either
import DA.Finance.Asset
import DA.Finance.Types
import DA.Finance.Trade.Dvp
import DA.Finance.Trade.SettlementInstruction
import DA.Set (Set)
import Synfini.Nft
import Synfini.Nft.Trade.Dvp
import Synfini.Nft.Trade.SettlementInstruction

data NftDvpSettlementRule_Process_Result = NftDvpSettlementRule_Process_Result
  with
    nftDvpCid : ContractId NftDvp
    paymentCids : [Either NftSettlementInstruction_Process_Result [ContractId AssetDeposit]]
  deriving (Show, Eq)

template NftDvpSettlementRule
  with
    masterAgreement : MasterAgreement
      -- ^ The master agreement for which the rule can be used.
  where
    signatory masterAgreement.id.signatories
    observer masterAgreement.party1, masterAgreement.party2

    key masterAgreement.id : Id
    maintainer key.signatories

    nonconsuming choice NftDvpSettlementRule_Process: NftDvpSettlementRule_Process_Result
      with
        nftDvpCid : ContractId NftDvp
          -- ^ Dvp trade to be settled
        paymentInstructionCids : [Either (ContractId NftSettlementInstruction) (ContractId SettlementInstruction)]
          -- ^ Fully allocated settlement instruction for each payment asset.
        deliveryInstructionCids : [Either (ContractId NftSettlementInstruction) (ContractId SettlementInstruction)]
          -- ^ Fully allocated settlement instruction for each delivery asset.
        ctrl : Party
          -- ^ masterAgreement.party1 or masterAgreement.party2
      controller ctrl
      do
        assert (ctrl == masterAgreement.party1 || ctrl == masterAgreement.party2)
        pure undefined
