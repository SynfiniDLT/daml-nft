-- Copyright (c) 2022 ASX Operations Pty Ltd. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Synfini.Nft.Trade.Dvp.Settlement where

import DA.Assert ((===))
import DA.Finance.Asset
import DA.Finance.Types
import DA.Finance.Trade.Dvp.Settlement
import DA.Finance.Trade.SettlementInstruction
import Synfini.Nft
import Synfini.Nft.Trade.Dvp
import Synfini.Nft.Trade.SettlementInstruction

data NftDvpSettlementRule_Process_Result = NftDvpSettlementRule_Process_Result
  with
    nftDvpCid : ContractId NftDvp
    paymentDepositCids : [[ContractId AssetDeposit]]
    deliveryDepositCids : [[ContractId AssetDeposit]]
    paymentNftCids : [(ContractId Nft, ContractId NftTransferRule)]
    deliveryNftCids : [(ContractId Nft, ContractId NftTransferRule)]
  deriving (Show, Eq)

template NftDvpSettlementRule
  with
    masterAgreement : MasterAgreement
      -- ^ The master agreement for which the rule can be used.
  where
    signatory masterAgreement.id.signatories
    observer masterAgreement.party1, masterAgreement.party2

    key masterAgreement.id : Id
    maintainer key.signatories

    nonconsuming choice NftDvpSettlementRule_Process: NftDvpSettlementRule_Process_Result
      with
        nftDvpCid : ContractId NftDvp
          -- ^ Dvp trade to be settled
        paymentInstructionCids : [ContractId SettlementInstruction]
          -- ^ Fully allocated settlement instruction for each payment asset.
        deliveryInstructionCids : [ContractId SettlementInstruction]
          -- ^ Fully allocated settlement instruction for each delivery asset.
        nftPaymentInstructionCids : [ContractId NftSettlementInstruction]
        nftDeliveryInstructionCids : [ContractId NftSettlementInstruction]
        ctrl : Party
          -- ^ masterAgreement.party1 or masterAgreement.party2
      controller ctrl
      do
        nftDvp <- fetch nftDvpCid

        dvpCid <- create nftDvp.dvp
        fungibleSettlemementResult <- exerciseByKey @DvpSettlementRule masterAgreement.id DvpSettlement_Process with
          dvpCid
          paymentInstructionCids
          deliveryInstructionCids
          ctrl
        finalDvp <- fetch fungibleSettlemementResult.dvpCid
        archive fungibleSettlemementResult.dvpCid
        archive nftDvpCid
        finalNftDvpCid <- create nftDvp with dvp = finalDvp

        let seller = if nftDvp.dvp.buyer == masterAgreement.party1 then masterAgreement.party2 else masterAgreement.party1
        paymentNftCids <- mapA
          (doNftSettlement masterAgreement nftDvp.dvp.buyer seller)
          (zip nftDvp.paymentNfts nftPaymentInstructionCids)
        deliveryNftCids <- mapA
          (doNftSettlement masterAgreement seller nftDvp.dvp.buyer)
          (zip nftDvp.deliveryNfts nftDeliveryInstructionCids)

        pure NftDvpSettlementRule_Process_Result with
          nftDvpCid = finalNftDvpCid
          paymentDepositCids = fungibleSettlemementResult.paymentDepositCids
          deliveryDepositCids = fungibleSettlemementResult.deliveryDepositCids
          paymentNftCids
          deliveryNftCids

doNftSettlement : MasterAgreement ->
                  Party ->
                  Party ->
                  ((CollectionId, TokenId), ContractId NftSettlementInstruction) ->
                  Update (ContractId Nft, ContractId NftTransferRule)
doNftSettlement masterAgreement sender recipient ((collectionId, tokenId), settlementCid) = do
  settlement <- fetch settlementCid
  settlement.masterAgreement === masterAgreement
  settlement.collectionId === collectionId
  settlement.tokenId === tokenId
  settlement.senderWallet.owner === sender
  settlement.recipientWallet.owner === recipient
  exercise settlementCid NftSettlementInstruction_Process
